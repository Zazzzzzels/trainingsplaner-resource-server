package de.tlg.trainingsplaner.resourceserver.db;

import de.tlg.trainingsplaner.resourceserver.db.repository.UserRepository;
import de.tlg.trainingsplaner.resourceserver.model.entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * class to capsule all database operations and combine them with business logic
 */
@Component
public class UserDatabase {

    @Autowired
    UserRepository userRepository;

    /**
     * Method to find a user from database by its stored email
     * @param email users email
     * @return a user identified by its email address
     */
    public User findUserByEmail(String email) {
        return this.userRepository.findUserByEmail(email);
    }

    /**
     * find a user by the field "user_id""
     * @param userId the userId which is used to identify user from outside of the database
     *               (not the autogenerated id from MariaDB)
     * @return the user to the given userId
     */
    public User findUserById(String userId) {
        return this.userRepository.findUserByUserId(userId);
    }

    /**
     * Save a new user to the database
     * @param user the object to save in database
     * @return the saved User object
     */
    public User saveNewUser(User user) {

        // set user id and prevent from being used twice
        // a new uuid is created for use in PUT or DELETE requests
        do {
            user.setUserId(UUID.randomUUID().toString());
        } while (this.userRepository.findUserByUserId(user.getUserId()) != null);

        this.userRepository.save(user);

        return user;
    }

    /**
     * Update a users information
     * @param user the user to update including database id
     */
    public void updateUser(User user) {
        this.userRepository.save(user);
    }

    /**
     * delete a user by its id
     * @param id the id of the user to be deleted
     */
    public void deleteUserById(Integer id) {
        this.userRepository.deleteById(id);
    }

    // method to return all stored users
    // for local testing only - will be deactivated later
    public List<User> findAll() {
        Iterable<User> userIterable = this.userRepository.findAll();
        List<User> allUsers = new ArrayList<>();

        userIterable.forEach(allUsers::add);

        return allUsers;
    }

    // method to delete all stored users
    // for local testing only - will be deactivated later
    public void deleteAll() {
        this.userRepository.deleteAll();
    }

}
