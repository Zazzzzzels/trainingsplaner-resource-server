openapi: 3.0.1
info:
  title: Trainingsplaner Resource Server API
  description: Spring Resource Server
  version: "0.1"
servers:
  - url: http://localhost:8081
    description: Generated server url
paths:
  /trainingsplaner/resource-server/users:
    get:
      tags:
        - user-collection-controller
      operationId: get
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
        - user-collection-controller
      operationId: put
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - user-collection-controller
      summary: register new user in database
      operationId: registerNewUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      responses:
        "201":
          description: user information was created
        "409":
          description: given mail and/or id is already registered
        "401":
          description: client is unauthorized to request user info
        "500":
          description: unexpected error
    delete:
      tags:
        - user-collection-controller
      operationId: delete
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
        - user-collection-controller
      operationId: patch
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /trainingsplaner/resource-server/users/{userId}:
    get:
      tags:
        - user-item-controller
      summary: get a users info by its id
      operationId: getUserInfo
      parameters:
        - name: authorization
          in: header
          description: access token to validate request
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: userId to be searched
          required: true
          schema:
            type: string
      responses:
        "401":
          description: client is unauthorized to request user info
        "200":
          description: the user was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        "404":
          description: no user for given id was not found
    put:
      tags:
        - user-item-controller
      summary: override an existing user
      operationId: updateUserInfo
      parameters:
        - name: authorization
          in: header
          description: access token
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user id to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      responses:
        "204":
          description: user information was updated
        "401":
          description: client is unauthorized to update user info
        "404":
          description: no user for given id was not found
        "500":
          description: unexpected error
    post:
      tags:
        - user-item-controller
      operationId: post
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - user-item-controller
      summary: delete an existing user
      operationId: deleteUserFromDb
      parameters:
        - name: authorization
          in: header
          description: access token
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user to delete
          required: true
          schema:
            type: string
      responses:
        "401":
          description: client is unauthorized to delete user info
        "404":
          description: no user for given id was not found
        "200":
          description: the user was deleted
        "500":
          description: unexpected error
    patch:
      tags:
        - user-item-controller
      operationId: patch_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /trainingsplaner/resource-server/test/users:
    get:
      tags:
        - user-test-controller
      operationId: getAllUserInfo
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoResponse'
    post:
      tags:
        - user-test-controller
      operationId: addMultipleUsers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - user-test-controller
      operationId: clearDatabase
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - DIVERSE
    UserRegisterRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - DIVERSE
        email:
          type: string
    UserInfoResponse:
      type: object
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - DIVERSE
        email:
          type: string